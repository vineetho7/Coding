1302. Deepest Leaves Sum
Medium
4.3K
112
Companies
Given the root of a binary tree, return the sum of values of its deepest leaves.
 

Example 1:


Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
public:
int height=0;

    // int h(TreeNode* root){
    //     if(!root){
    //         return 0;

    //     }
    //     return max(1+h(root->left),1+h(root->right));
    // }
    // int s(TreeNode* root,int lev){
    //     if(!root){
    //         return 0;
    //     }
    //     if(lev==height){
    //         return root->val;
    //     }
    //     return s(root->left,lev+1)+s(root->right,lev+1);
    // }

    int deepestLeavesSum(TreeNode* root) {
        // if(!root){
        //     return 0;
        // }

        //  height=h(root);
        // int sum = s(root,1);
        // return sum;

        queue<TreeNode* >q;

        if(root){
            q.push(root);
        }
        else{
            return 0;
        }
        //int sum=0;
        int ls;
        while(!q.empty()){
            int l=q.size();

             ls=0;
            while(l--){
                ls=ls+q.front()->val;
                if(q.front()->left){
                    q.push(q.front()->left);
                }
                if(q.front()->right){
                    q.push(q.front()->right);
                }
                q.pop();
            }

        }
        return ls;

        
        
    }
};
