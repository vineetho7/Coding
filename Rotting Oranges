994. Rotting Oranges
Medium
11K
352
Companies
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.



int fx[]={-1,1,0,0};
int fy[]={0,0,-1,1};
class Solution {
public:

    
    int r,c;
    queue<pair<int,int>>q;
    
    int bfs(vector<vector<int>>& grid,vector<vector<int>>& v){
        int count=-1;
        while(!q.empty()){
            int size=q.size();
            while(size--){
                // pair<int,int>p;
                // p=q.front()
                int x= q.front().first;
                int y= q.front().second;
                q.pop();
                for(int k=0;k<4;k++){
                    int xx= x+fx[k];
                    int yy= y+fy[k];
                    if(xx>=0 && yy>=0 && xx<r && yy<c && !v[xx][yy] && grid[xx][yy]){
                        v[xx][yy]=1;
                        q.push({xx,yy});
                    }
                }
            }
            count++;
        }
        return count;
    }

    int orangesRotting(vector<vector<int>>& grid) {

         r=grid.size();
         c= grid[0].size();
        
        vector<vector<int>>v(r,vector<int>(c));

        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==2){
                    v[i][j]=1;
                    q.push({i,j});

                }
            }
        }

        int ans=max(0,bfs(grid,v));

        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(v[i][j]==0 && grid[i][j]==1){
                    return -1;
                }
            }
        }
        return ans;
        
    }
};
