Evaluate Reverse Polish Notation
Medium
5.9K
895
Companies
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9


class Solution {
public:
    int evalRPN(vector<string>& tokens) {

        stack<long>s;
        int k=0;
        int l=0;

        for(int i=0;i<tokens.size();i++){
            string c= tokens[i];
            if(c=="+" ||c=="/" ||c=="-" ||c=="*"){

               
                if(c=="+"){
                    k=s.top();
                    s.pop();
                    l=s.top()+k;
                    s.pop();
                    s.push(l);

                }
                if(c=="-"){
                    k=s.top();
                    s.pop();
                    l=s.top()-k;
                    s.pop();
                    s.push(l);

                }
                if(c=="*"){
                    k=s.top();
                    s.pop();
                    l=s.top()*k;
                    s.pop();
                    s.push(l);

                }
                if(c=="/"){
                    k=s.top();
                    s.pop();
                    l=s.top()/k;
                    s.pop();
                    s.push(l);

                }

            }
            else{
                s.push(stoi(c));
            }
        }
        return s.top();
        
        
    }
};
