1161. Maximum Level Sum of a Binary Tree
Medium
3.1K
93
Companies
Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level x such that the sum of all the values of nodes at level x is maximal.

 

Example 1:


Input: root = [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        if(!root){
            return 0;
        }

       // priority_queue<pair<int,int> ,vector<pair<int,int>, less<long long>>pq;

        

        queue<TreeNode* > q;
        q.push(root);
        int lev=1;
        int x=0;
        int sum=INT_MIN;

        while(!q.empty()){
            int n= q.size();
            long long int ans =0;
            x++;
            
            
            
            while(n--){
                TreeNode* p= q.front();
                q.pop();
                ans=ans+p->val;
                

                if(p->left){
                    q.push(p->left);

                }  
                if(p->right){
                    q.push(p->right);
                }       
                
               }

               if(sum<ans){
                   sum=ans;
                   lev=x;

                   
               }
               
               

        }
        return lev;
        // if(pq.size()<k){
        //     return -1;
        // }

        // int count=0;
        // while(count< (k-1)){
        //     pq.pop();
        //     count++;
        // }
        // return pq.top();
        
    }
};
