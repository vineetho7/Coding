244. Shortest Word Distance II
Solved
Medium
Topics
Companies
Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.

Implement the WordDistance class:

WordDistance(String[] wordsDict) initializes the object with the strings array wordsDict.
int shortest(String word1, String word2) returns the shortest distance between word1 and word2 in the array wordsDict.
 

Example 1:

Input
["WordDistance", "shortest", "shortest"]
[[["practice", "makes", "perfect", "coding", "makes"]], ["coding", "practice"], ["makes", "coding"]]
Output
[null, 3, 1]

Explanation
WordDistance wordDistance = new WordDistance(["practice", "makes", "perfect", "coding", "makes"]);
wordDistance.shortest("coding", "practice"); // return 3
wordDistance.shortest("makes", "coding");    // return 1
 

Constraints:

1 <= wordsDict.length <= 3 * 104
1 <= wordsDict[i].length <= 10
wordsDict[i] consists of lowercase English letters.
word1 and word2 are in wordsDict.
word1 != word2
At most 5000 calls will be made to shortest.



class WordDistance {
public:
unordered_map<string, vector<int>> words;
    WordDistance(vector<string>& wordsDict) {
        for(int i = 0; i < wordsDict.size(); i++) {
            words[wordsDict[i]].push_back(i);
        }
        
    }
    
    int shortest(string word1, string word2) {

        int i = 0;
        int j = 0;
        int size1 = words[word1].size();
        int size2 = words[word2].size();
        int dist = INT_MAX;
        
        while(i < size1 && j < size2) {
            int val1 = words[word1][i], val2 = words[word2][j];
            dist = min(dist, abs(val1 - val2));
            if(val1 <= val2) {
                i++;
            }else {
                j++;
            }
        }
        return dist;
        
    }
};

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance* obj = new WordDistance(wordsDict);
 * int param_1 = obj->shortest(word1,word2);
 */
