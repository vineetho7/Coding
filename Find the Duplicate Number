287. Find the Duplicate Number
Medium
19.6K
3K
Companies
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        // int n=nums.size();
        // int sum=n*(n+1)/2;
        // int sq= (n*(2*n+1)*(n+1))/6;
        // int a,b;
        // int s=0;
        // int diff=0;
        // for(int i=0;i<nums.size();i++){
        //     s=s+nums[i]*nums[i];
        //     diff=diff+nums[i];
        // }
        // int d=sum-diff;
        // int x= ((sq-s)/d+d)/2;
        // return x-d;

      //  for(int i=0;i<nums.size();i++){
       //     if(nums[abs(nums[i])]>0){
        //        nums[abs(nums[i])]*=-1;
         //   }
         //   else{
       //         return abs(nums[i]);
      //      }
      //  }
       // return 0;

      for(int i=0;i<nums.size();i++){
            if(nums[abs(nums[i])-1]>0){
                nums[abs(nums[i])-1]*=-1;
                cout<<"***"<<nums[i]<<endl;
            }
            else{
                cout<<"=="<<nums[i]<<endl;
                return abs(nums[i]);
                
            }
        }
        return 0;
        
    }
};
