229. Majority Element II
Medium
7.9K
355
Companies
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?



class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        //     vector<int> x;
        // map<int,int> m;
        // for(int i=0;i<nums.size();i++){
        //     m[nums[i]]++;
        // }

        
        // for(auto &it:m){
        //     if(it.second>nums.size()/3){
        //         x.push_back(it.first);
        //     }
        // }
        // return x;

        int n1=INT_MIN,n2=INT_MIN;
        int c1=0,c2=0;
        for(auto n:nums){
            if(n==n1){
                c1++;
            }
            else if(n==n2){
                c2++;
            }
            else if(c1==0){
                n1=n;
                c1=1;
            }
            else if(c2==0){
                n2=n;
                c2=1;
            }
            else{
                c1--;
                c2--;
            }
        }

        int m=nums.size()/3;

        c1=0;
        c2=0;
        vector<int>ans;
        for(auto n:nums){
            if(n==n1){c1++;}
            if(n==n2){c2++;}
        }
        if(c1>m){
            ans.push_back(n1);
        }
        if(c2>m){
            ans.push_back(n2);
        }
        return ans;

    }
};
