121. Best Time to Buy and Sell Stock
Easy
26K
820
Companies
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.






Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.




class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int prof=0;
        int n=prices.size();
        int minp=INT_MAX;
        for(int i=0;i<n;i++){
            minp=min(minp,prices[i]);
            prof=max(prof,prices[i]-minp);
            //minp=min(minp,prices[i]);
            
        }
        return prof;
        
    }
};


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int min=prices[0];
        int max=0;
        for(int i=1;i<prices.size();i++){
            if(prices[i]<min){
                min = prices[i];

            }
            else if(prices[i]-min > max){
                max=prices[i]-min;
            }
        }
        return max;
    }
};

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int mini=prices[0];
        int maxi=0;
        for(int i=1;i<prices.size();i++){
            // if(prices[i]<min){
            //     min = prices[i];

            // }
            mini = min( mini,prices[i]);
            // else if(prices[i]-min > max){
            //     max=prices[i]-min;
            // }
            maxi=max( maxi,prices[i]-mini);
        }
        return maxi;
    }
};
