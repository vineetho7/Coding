3Sum
Medium
26.2K
2.4K
Companies
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {

        // int len=nums.size();
        // sort(nums.begin(),nums.end());
        // vector<vector<int>>ans;

        // for(int i=0;i<len-1;i++){
        //     int j=i+1;
        //     int k=len-1;
        //     while(j<k){
        //         if(nums[i]+nums[j]+nums[k] >0){
        //             k--;
        //         }
        //         else if(nums[i]+nums[j]+nums[k]<0){
        //             j++;
        //         }
        //         else {
        //             ans.push_back({nums[i],nums[j],nums[k]});
        //             int left=j;
        //             int right=k;

        //             while(j<k && nums[j]==nums[left]){j++;}
        //             while(j<k && nums[k]==nums[right]){k--;}
        //         }
        //     }
        //     while(i+1<len && nums[i]==nums[i+1]){i++;}
        // }
        // return ans;



        int len=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;
        set<vector<int>>s;

        for(int i=0;i<len;i++){
            int j=i+1;
            int k=len-1;
            while(j<k){
                if(nums[i]+nums[j]+nums[k] >0){
                    k--;
                }
                else if(nums[i]+nums[j]+nums[k]<0){
                    j++;
                }
                else {
                    s.insert({nums[i],nums[j],nums[k]});
                    j++;
                    k--;
                }
            }
            
        }
        for(auto it: s){
            ans.push_back(it);
        }
        return ans;
        




    }
};
