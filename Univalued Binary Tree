965. Univalued Binary Tree
Easy
1.7K
63
Companies
A binary tree is uni-valued if every node in the tree has the same value.

Given the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.

 

Example 1:


Input: root = [1,1,1,1,1,null,1]
Output: true
Example 2:


Input: root = [2,2,2,5,2]
Output: false


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
set<int>s;
    void traversal(TreeNode* root){
        if(root){
            traversal(root->left);
            s.insert(root->val);
            traversal(root->right);
        }
    }
    bool isUnivalTree(TreeNode* root) {

        // if(!root){
        //     return true;
        // }
        // if(root->left && root->left->val != root->val){
        //     return false;
        // }
        // if(root->right && root->right->val != root->val){
        //     return false;
        // }
        // return isUnivalTree(root->left) && isUnivalTree(root->right);

        traversal(root);
        return s.size() ==1;

        
    }
};
