
42. Trapping Rain Water
Hard
26.8K
367
Companies
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.





class Solution {
public:
    int trap(vector<int>& height) {

        // int left=0;
        // int right=height.size()-1;
        // int lmax=0;
        // int rmax=0;
        // int ans=0;

        // while(left<right){
        //     if(height[left]<height[right]){
        //     if(height[left]>=lmax){
        //         lmax=height[left];
        //     }
        //     else{
        //         ans+=lmax-height[left];
        //     }
        //     left++;
        //     }
        //     else{
        //         if(height[right]>=rmax){
        //             rmax=height[right];
        //         }
        //         else{
        //             ans=ans+rmax-height[right];
        //         }
        //         right--;
        //     }
        // }
        // return ans;
        int n=height.size();
        vector<int>leftmax;
        vector<int>rightmax;
        int lmax=0;
        int rmax=0;

        for(int i=0;i<height.size()-1;i++){

            if(height[i]<lmax){
                leftmax.push_back(lmax);
            }
            else{
                lmax=height[i];
                leftmax.push_back(lmax);

            }


        }
        for(int i=height.size()-1;i>=0;i--){

            if(height[i]<rmax){
                rightmax.push_back(rmax);
            }
            else{
                rmax=height[i];
                
                rightmax.push_back(rmax);
                

            }


        }
        int ans=0;

        for(int i=0;i<n-1;i++){

            ans = ans+min(leftmax[i],rightmax[n-1-i])-height[i];
            
        }
        return ans;

        
    }
};



//alternate solution

class Solution {
public:
    int trap(vector<int>& height) {
        int l=0;
        int r=height.size()-1;
        int lmax=INT_MIN;
        int rmax=INT_MIN;
        int ans=0;
        while(l<r){
            lmax=max(lmax,height[l]);
            rmax=max(rmax,height[r]);
            ans=ans+((lmax>rmax)?rmax-height[r--]: lmax-height[l++]);

        }
        return ans;
        
    }
};
