993. Cousins in Binary Tree
Easy
3.6K
178
Companies
Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:


Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int height;
    void find(unordered_map<int,pair<int,int>>&m, TreeNode* root, int x, int parent) {

        if(!root){
            return;
        }
        m[root->val]={x,parent};
        find(m,root->left,x+1,root->val);
        find(m,root->right,x+1,root->val);

        
        
    }
    bool isCousins(TreeNode* root, int x, int y) {
       unordered_map<int,pair<int,int>>m;
       find(m,root,0,-1);
       return m[x].second == m[y].second ? false: m[x].first == m[y].first;
    }
};
